import React, { useEffect, useState } from 'react';
import Head from "next/head";
import {
  DashboardOutlined,
  SolutionOutlined,
  TeamOutlined,
  DeploymentUnitOutlined,
  ProjectOutlined,
} from '@ant-design/icons';
import type { MenuProps } from 'antd';
import { Layout, Menu, message, Button } from "antd";
import {
  MenuUnfoldOutlined,
  MenuFoldOutlined,
  ReadOutlined,
  FileAddOutlined,
  EditOutlined,
} from '@ant-design/icons';
import router, { useRouter } from "next/router";
import apiService from '../../lib/services/api-service';
import storage from '../../lib/services/storage';
import Link from 'next/link';
import Breadcrumbs from '../common/breadcrumbs';
import { Role } from '../../lib/model/role';
import { routes, SideBarItem } from '../../lib/constant/routes';
import { getActiveKey } from '../../lib/util/side-nav';
import { useUserRole } from '../custom-hooks/login-state';

const { Header, Content, Sider, Footer } = Layout;


function renderMenuItems(data: SideBarItem[], parent = '') {
  // eslint-disable-next-line react-hooks/rules-of-hooks
  const userRole = useUserRole();
  return data.map((item, index) => {
    const key = `${item.label}_${index}`

    if (item.subMenu) {
      return (
        <Menu.SubMenu key={key} title={item.label} icon={item.icon}>
          {renderMenuItems(item.subMenu, item.path.join('/'))}
        </Menu.SubMenu>
      );
    }
     else {
      return item.hide ? null : (
        <Menu.Item key={key} title={item.label} icon={item.icon}>
          {!!item.path.length || item.label.toLocaleLowerCase() === 'overview' ? (
            <Link href={['/dashboard', userRole, parent, ...item.path].join('/')}>
              {item.label}
            </Link>
          ) : (
            item.label
          )}
        </Menu.Item>
      );
    }
  });
}

const getMenuConfig = (
  data: SideBarItem[]
): { defaultSelectedKeys: string[]; defaultOpenKeys: string[] } => {
  const key = getActiveKey(data);
  const defaultSelectedKeys = [key.split('/').pop()] as string[];
  const defaultOpenKeys = key.split('/').slice(0, -1);

  return { defaultSelectedKeys, defaultOpenKeys };
};

export default function AppLayout(props: React.PropsWithChildren<any>) {
  const { children } = props;
  const router = useRouter();
  const userRole = useUserRole();
  const sideMenu = routes.get(userRole) as SideBarItem[];
  const menuItems = renderMenuItems(sideMenu);
  const [collapsed, toggleCollapse] = useState(false);
  const { defaultOpenKeys, defaultSelectedKeys } = getMenuConfig(sideMenu);

  const onLogOut = async () => {

    const { data: isLogout } = await apiService.logout();

    if (isLogout) {
      storage.deleteUserInfo();
      router.push('/login');
    }
  }

  const toggleCollapsed = () => {
    toggleCollapse(!collapsed);
  };

  const items1: MenuProps['items'] = [
    {
      label:
        <a
          onClick={onLogOut}
        >
          Log Out
        </a>,
      key: 'logout'
    }
  ];

  return (
    <Layout>
      <Head>
        <title>CMS</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Sider
        collapsible
        collapsed={collapsed}
        onCollapse={(isCollapsed) => toggleCollapse(isCollapsed)}
      >
        <div className="logo" />
        <Menu
          theme="dark"
          mode="inline"
          defaultOpenKeys={defaultOpenKeys}
          defaultSelectedKeys={defaultSelectedKeys}
        >
          {menuItems}
        </Menu>
      </Sider>

      <Layout>
        <Header className="header flex justify-end" style={{ position: 'fixed', zIndex: 1000, width: '100%' }}>
          <div className="logo flex-grow">
            <Button type="primary" onClick={toggleCollapsed} style={{ marginBottom: 16 }}>
              {collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}
            </Button>
          </div>
          <Menu
            theme="dark"
            mode="horizontal"
            items={items1}
            style={{ width: '20%' }}
          />
        </Header>
        <Layout
          style={{
            padding: '0 24px 24px',
            marginTop: '70px'
          }}>
          <Breadcrumbs />
          <Content
            className="site-layout-background"
            style={{
              padding: 24,
              margin: 0,
              minHeight: 280,
            }}
          >

            {children}
          </Content>

          {/* <Footer style={{ textAlign: "center" }}>Â©2022</Footer> */}
        </Layout>
      </Layout>
    </Layout>
  );
}
